services:
  ######### [ Reverse proxy ] #########
  reverse-proxy:
    image: nginx:1.26.3-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${PWD}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    restart: unless-stopped
    networks:
      - reverse-proxy-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M


  ######### [ Config ] #########
  config-server:
    build:
      context: ./backend/services/config-server
    environment:
      - SPRING_PROFILES_ACTIVE=native,prod
    env_file:
      - .env
    volumes:
      - ./backend/services/config-server/src/main/resources/configurations:/app/configurations
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:7777/actuator/health || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 25
      start_period: 5s
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Gateway ] #########
  gateway-server:
    build:
      context: ./backend/services/gateway
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9999/actuator/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 8s
    networks:
      - reverse-proxy-net
      - gateway-net
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1536M


  ######### [ Finance ] #########
  finance-server:
    build:
      context: ./backend/services/finance
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-finance:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1536M

  mongodb-finance:
    image: mongo:8.0
    container_name: mongodb-finance
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_FINANCE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_FINANCE_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_FINANCE_DB}
    volumes:
      - mongodb_finance_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD", "mongosh",
        "-u", "${MONGO_FINANCE_USER}",
        "-p", "${MONGO_FINANCE_PASSWORD}",
        "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Wallet ] #########
  wallet-server:
    build:
      context: ./backend/services/wallet
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      postgres-wallet:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M

  postgres-wallet:
    image: postgres:17.4
    container_name: postgres-wallet
    environment:
      POSTGRES_USER: ${POSTGRES_WALLET_USER}
      POSTGRES_PASSWORD: ${POSTGRES_WALLET_PASSWORD}
      POSTGRES_DB: ${POSTGRES_WALLET_DB}
    volumes:
      - postgres_wallet:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_WALLET_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Subscription ] #########
  subscription-server:
    build:
      context: ./backend/services/subscription
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-subscription:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1536M

  mongodb-subscription:
    image: mongo:8.0
    container_name: mongodb-subscription
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_SUBSCRIPTION_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_SUBSCRIPTION_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_SUBSCRIPTION_DB}
    volumes:
      - mongodb_subscription_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M


  ######### [ Notification ] #########
  notification-server:
    build:
      context: ./backend/services/notification
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      config-server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Authentication ] #########
  keycloak:
    image: quay.io/keycloak/keycloak:26.1
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KC_DB_SCHEMA: public
      KC_DB_INIT_SCHEMA: "true"

      KC_HTTP_ENABLED: "true"
      KC_HTTPS_ENABLED: "false"
      KC_HOSTNAME: auth.muybien.pl

      KC_HOSTNAME_V2: "true"
      KC_HOSTNAME_V2_PROXY: edge
      KC_HOSTNAME_V2_STRICT: "true"
      KC_HOSTNAME_V2_STRICT_HTTPS: "true"
      KC_HOSTNAME_V2_ADMIN: https://auth.muybien.pl

      KEYCLOAK_ADMIN: ${KC_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USER: ${KC_ADMIN_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}

    #      KC_HEALTH_ENABLED: "true"
    #      KC_METRICS_ENABLED: "true"
    command:
      - start
      - --import-realm
      - --force-bootstrap
    volumes:
      - ./init/marketsync-client-prod.json:/opt/keycloak/data/import/marketsync-client-prod.json
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    networks:
      - reverse-proxy-net
      - database-net
    #    healthcheck:
    #      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
    #      interval: 5s
    #      timeout: 5s
    #      retries: 30
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M

  postgres-keycloak:
    image: postgres:17.4
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
    volumes:
      - postgres_keycloak:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 5s
      timeout: 5s
      retries: 15
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Selenium ] #########
  selenium-chrome:
    image: seleniarm/standalone-chromium:4.20.0
    platform: linux/arm64
    ports:
      - "4444:4444"
    container_name: selenium-chrome
    environment:
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    restart: unless-stopped
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M


  ######### [ Kafka & Zookeeper ] #########
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "nc", "-z", "zookeeper", "2181" ]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    volumes:
      - kafka_data:/var/lib/kafka
    platform: linux/arm64
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093" ]
      start_period: 35s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Frontend ] #########
  frontend-server:
    build:
      context: ./frontend
      args:
        - ENV_CONFIGURATION=production
    restart: unless-stopped
    networks:
      - reverse-proxy-net
      - gateway-net
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2048M


networks:
  reverse-proxy-net:
    driver: bridge
  gateway-net:
    driver: bridge
  backend-net:
    driver: bridge
  database-net:
    driver: bridge

volumes:
  postgres_keycloak:
  postgres_wallet:
  mongodb_finance_data:
  mongodb_subscription_data:
  zookeeper_data:
  kafka_data: