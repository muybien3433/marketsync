services:
  ######### [ Config ] #########
  config-server:
    build:
      context: ./backend/services/config-server
    networks:
      - marketsync-microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:7777/actuator/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 8s

  ######### [ Gateway ] #########
  gateway-server:
    build:
      context: ./backend/services/gateway
    ports:
      - "9999:9999"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - marketsync-microservices-net
    restart: unless-stopped

  ######### [ Finance ] #########
  finance-server:
    build:
      context: ./backend/services/finance
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-finance:
        condition: service_healthy
    networks:
      - marketsync-microservices-net
    restart: unless-stopped

  mongodb-finance:
    image: mongo:latest
    container_name: mongodb-finance
    environment:
      MONGO_INITDB_ROOT_USERNAME: finance
      MONGO_INITDB_ROOT_PASSWORD: finance
      MONGO_INITDB_DATABASE: finance
    networks:
      - marketsync-microservices-net
    volumes:
      - mongodb_finance_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  ######### [ Wallet ] #########
  wallet-server:
    build:
      context: ./backend/services/wallet
    depends_on:
      config-server:
        condition: service_healthy
      postgres-wallet:
        condition: service_healthy
    networks:
      - marketsync-microservices-net
    restart: unless-stopped

  postgres-wallet:
    image: postgres:latest
    container_name: postgres-wallet
    environment:
      POSTGRES_USER: wallet
      POSTGRES_PASSWORD: wallet
      POSTGRES_DB: wallet
    networks:
      - marketsync-microservices-net
    volumes:
      - postgres_wallet:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U wallet" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  ######### [ Subscription ] #########
  subscription-server:
    build:
      context: ./backend/services/subscription
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-subscription:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - marketsync-microservices-net
    restart: unless-stopped

  mongodb-subscription:
    image: mongo:latest
    container_name: mongodb-subscription
    environment:
      MONGO_INITDB_ROOT_USERNAME: subscription
      MONGO_INITDB_ROOT_PASSWORD: subscription
      MONGO_INITDB_DATABASE: subscription
    networks:
      - marketsync-microservices-net
    volumes:
      - mongodb_subscription_data:/data/db
      - ./init-files/mongo-subscription.js:/docker-entrypoint-initdb.d/mongo-subscription.js:ro
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  ######### [ Notification ] #########
  notification-server:
    build:
      context: ./backend/services/notification
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - marketsync-microservices-net
    restart: unless-stopped

  ######### [ Authentication ] #########
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    ports:
      - "8080:8080"
    depends_on:
      - postgres-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak/keycloak?sslmode=disable
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: "true"
    volumes:
      - ./init-files/marketsync-client.json:/opt/keycloak/data/import/marketsync-client.json
    command:
      - "start-dev"
      - "--import-realm"
    restart: unless-stopped
    networks:
      - marketsync-microservices-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M

  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_keycloak:/var/lib/postgresql/data
    networks:
      - marketsync-microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5

  ######### [ Selenium ] #########
  selenium-chrome:
    image: selenium/standalone-chrome:latest
    platform: linux/amd64
    ports:
      - "4444:4444"
    container_name: selenium-chrome
    networks:
      - marketsync-microservices-net
    environment:
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M

  ######### [ Kafka ] #########
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    networks:
      - marketsync-microservices-net
    volumes:
      - kafka_data:/var/lib/kafka/data
    entrypoint: [ "/bin/sh", "-c", "rm -rf /var/lib/kafka/data/meta.properties && /etc/confluent/docker/run" ]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "nc", "-z", "kafka", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - marketsync-microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "nc", "-z", "zookeeper", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  ######### [ Frontend ] #########
  frontend-server:
    build:
      context: ./frontend
    ports:
      - "80:80"
    networks:
      - marketsync-microservices-net
    restart: unless-stopped

networks:
  marketsync-microservices-net:
    driver: bridge

volumes:
  postgres_keycloak:
  postgres_wallet:
  mongodb_finance_data:
  mongodb_subscription_data:
  kafka_data: