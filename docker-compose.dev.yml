services:
  ######### [ Config ] #########
  config-server:
    build:
      context: ./backend/config
    environment:
      - SPRING_PROFILES_ACTIVE=native,dev
    ports:
      - "7777:7777"
    restart: unless-stopped
    volumes:
      - ./backend/config/src/main/resources/configurations:/app/configurations
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:7777/actuator/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 8s
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Gateway ] #########
  gateway-server:
    build:
      context: ./backend/gateway
    ports:
      - "9999:9999"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
#      - FRONTEND_URL=http://localhost:4200
#      - KEYCLOAK_ISSUER_URL=http://keycloak:8080/realms/marketsync
#      - JWK_URI=http://keycloak/realms/marketsync/protocol/openid-connect/certs
    restart: unless-stopped
    networks:
      - frontend-net
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M

  ######### [ Data & Finance ] #########
  data-server:
    build:
      context: ./backend/data
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-finance:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
#      - LOGGING_LEVEL_ROOT=DEBUG
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1536M

  finance-server:
    build:
      context: ./backend/finance
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-finance:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1536M

  mongodb-finance:
    image: mongo:latest
    container_name: mongodb-finance
    environment:
      MONGO_INITDB_ROOT_USERNAME: finance
      MONGO_INITDB_ROOT_PASSWORD: finance
      MONGO_INITDB_DATABASE: finance
    volumes:
      - mongodb_finance_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Wallet ] #########
  wallet-server:
    build:
      context: ./backend/wallet
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      config-server:
        condition: service_healthy
      postgres-wallet:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M

  postgres-wallet:
    image: postgres:latest
    container_name: postgres-wallet
    environment:
      POSTGRES_USER: wallet
      POSTGRES_PASSWORD: wallet
      POSTGRES_DB: wallet
    volumes:
      - postgres_wallet:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U wallet" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Subscription ] #########
  subscription-server:
    build:
      context: ./backend/subscription
    depends_on:
      config-server:
        condition: service_healthy
      mongodb-subscription:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: unless-stopped
    networks:
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M

  mongodb-subscription:
    image: mongo:latest
    container_name: mongodb-subscription
    environment:
      MONGO_INITDB_ROOT_USERNAME: subscription
      MONGO_INITDB_ROOT_PASSWORD: subscription
      MONGO_INITDB_DATABASE: subscription
    volumes:
      - mongodb_subscription_data:/data/db
      - ./init/mongo-subscription.js:/docker-entrypoint-initdb.d/mongo-subscription.js:ro
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M


  ######### [ Notification ] #########
  notification-server:
    build:
      context: ./backend/notification
    depends_on:
      kafka-1:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: unless-stopped
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Authentication ] #########
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    ports:
      - "8080:8080"
    depends_on:
      - postgres-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak/keycloak?sslmode=disable
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: "false"
#    volumes:
#      - ./init/marketsync-client-dev.json:/opt/keycloak/data/import/marketsync-client-dev.json
    command:
      - "start-dev"
      - "--import-realm"
    restart: unless-stopped
    networks:
      - frontend-net
      - backend-net
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M

  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_keycloak:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M


  ######### [ Selenium ] #########
  selenium-chrome:
    image: selenium/standalone-chromium:latest
    ports:
      - "4444:4444"
    container_name: selenium-chrome
    environment:
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    restart: unless-stopped
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2048M


  ######### [ Zookeeper ] #########
  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper-1
    restart: unless-stopped
    volumes:
      - zookeeper_data_1:/var/lib/zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10

  zookeeper-2:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper-2
    restart: unless-stopped
    volumes:
      - zookeeper_data_2:/var/lib/zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10

  zookeeper-3:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper-3
    restart: unless-stopped
    volumes:
      - zookeeper_data_3:/var/lib/zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10

  ######### [ Kafka Brokers ] #########
  kafka-1:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka-1
    restart: unless-stopped
    volumes:
      - kafka_data_1:/var/lib/kafka
    depends_on:
      zookeeper-1:
        condition: service_healthy
      zookeeper-2:
        condition: service_healthy
      zookeeper-3:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      start_period: 40s
      interval: 10s
      timeout: 10s
      retries: 10

  kafka-2:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka-2
    restart: unless-stopped
    volumes:
      - kafka_data_2:/var/lib/kafka
    depends_on:
      zookeeper-1:
        condition: service_healthy
      zookeeper-2:
        condition: service_healthy
      zookeeper-3:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094" ]
      start_period: 40s
      interval: 10s
      timeout: 10s
      retries: 10


#  ######### [ Frontend ] #########
#  frontend-server:
#    build:
#      context: ./frontend
#      args:
#        - ENV_CONFIGURATION=development
#    ports:
#      - "80:80"
#    restart: unless-stopped
#    networks:
#      - frontend-net
#    deploy:
#      resources:
#        limits:
#          cpus: '1'
#          memory: 1024M


networks:
  frontend-net:
    driver: bridge
  backend-net:
    driver: bridge
  database-net:
    driver: bridge

volumes:
  postgres_keycloak:
  postgres_wallet:
  mongodb_finance_data:
  mongodb_subscription_data:
  zookeeper_data_1:
  zookeeper_data_2:
  zookeeper_data_3:
  kafka_data_1:
  kafka_data_2: